import * as XLSX from "xlsx";

export const exportToExcel = (
  data: Record<string, unknown>[],
  filename: string,
  toolName?: string
) => {
  if (!data || data.length === 0) {
    console.warn("No data to export");
    return;
  }

  // Create a new workbook
  const workbook = XLSX.utils.book_new();

  // Convert data to worksheet
  const worksheet = XLSX.utils.json_to_sheet(data);

  // Get the range of the worksheet
  const range = XLSX.utils.decode_range(worksheet["!ref"] || "A1");

  // Auto-size columns
  const columnWidths: { wch: number }[] = [];
  const headers = Object.keys(data[0]);

  headers.forEach((header, colIndex) => {
    let maxWidth = header.length;

    // Check all data rows for max width in this column
    data.forEach((row) => {
      const cellValue = String(row[header] || "");
      maxWidth = Math.max(maxWidth, cellValue.length);
    });

    // Set reasonable limits (min 10, max 50 characters)
    columnWidths.push({ wch: Math.min(Math.max(maxWidth, 10), 50) });
  });

  worksheet["!cols"] = columnWidths;

  // Style the header row
  for (let col = range.s.c; col <= range.e.c; col++) {
    const cellAddress = XLSX.utils.encode_cell({ r: 0, c: col });
    if (worksheet[cellAddress]) {
      worksheet[cellAddress].s = {
        font: { bold: true, color: { rgb: "FFFFFF" } },
        fill: { fgColor: { rgb: "4472C4" } },
        alignment: { horizontal: "center", vertical: "center" },
        border: {
          top: { style: "thin", color: { rgb: "000000" } },
          bottom: { style: "thin", color: { rgb: "000000" } },
          left: { style: "thin", color: { rgb: "000000" } },
          right: { style: "thin", color: { rgb: "000000" } },
        },
      };
    }
  }

  // Add borders and formatting to data cells
  for (let row = range.s.r + 1; row <= range.e.r; row++) {
    for (let col = range.s.c; col <= range.e.c; col++) {
      const cellAddress = XLSX.utils.encode_cell({ r: row, c: col });
      if (worksheet[cellAddress]) {
        worksheet[cellAddress].s = {
          border: {
            top: { style: "thin", color: { rgb: "CCCCCC" } },
            bottom: { style: "thin", color: { rgb: "CCCCCC" } },
            left: { style: "thin", color: { rgb: "CCCCCC" } },
            right: { style: "thin", color: { rgb: "CCCCCC" } },
          },
          alignment: { vertical: "center" },
        };

        // Format numbers as currency if they look like prices
        const cellValue = worksheet[cellAddress].v;
        if (
          typeof cellValue === "number" &&
          cellValue % 1 !== 0 &&
          cellValue < 10000
        ) {
          worksheet[cellAddress].s.numFmt = "$#,##0.00";
        } else if (typeof cellValue === "number") {
          worksheet[cellAddress].s.numFmt = "#,##0";
        }
      }
    }
  }

  // Add the worksheet to the workbook
  const sheetName = toolName ? toolName.substring(0, 31) : "Data"; // Excel sheet names max 31 chars
  XLSX.utils.book_append_sheet(workbook, worksheet, sheetName);

  // Add metadata sheet with export info
  const metadataSheet = XLSX.utils.aoa_to_sheet([
    ["Export Information"],
    [""],
    ["Tool Name:", toolName || "Unknown"],
    ["Export Date:", new Date().toLocaleString()],
    ["Total Records:", data.length],
    ["Columns:", headers.join(", ")],
    [""],
    ["Generated by React MCP Client"],
  ]);

  // Style the metadata sheet
  metadataSheet["A1"].s = {
    font: { bold: true, size: 14 },
    alignment: { horizontal: "center" },
  };

  XLSX.utils.book_append_sheet(workbook, metadataSheet, "Export Info");

  // Generate and download the file
  const timestamp = new Date().toISOString().slice(0, 19).replace(/[:.]/g, "-");
  const finalFilename = `${filename}_${timestamp}.xlsx`;

  XLSX.writeFile(workbook, finalFilename);
};
